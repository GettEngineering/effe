// Code generated by Effe. DO NOT EDIT.

//+build !effeinject

package main

import (
	"example.com/foo/entities"
	"fmt"
)

func A(service AService) AFunc {
	return func(cmdVal5 entities.Cmd) ([3]int, []int, entities.Cmd,

		*entities.Foo,

		entities.Foo,

		int,

		string,

		error) {
		aVal3, err := service.Step1(cmdVal5)
		if err != nil {
			return [3]int{}, []int{}, cmdVal5, nil, entities.Foo{}, 0, "", err
		}
		stringVal5, intVal3, fooVal3, fooPtrVal3, cmdVal5, intValAr5, intValAr6, err := func(aVal2 a) (string, int, entities.Foo, *entities.Foo, entities.Cmd, []int, [3]int, error) {
			switch aVal2 {
			case "a":
				intValAr3, intValAr4, cmdVal3 := func(aVal a) ([3]int, []int, entities.Cmd) {
					cmdVal, intValAr, intValAr2 := service.Step2(aVal)
					return intValAr2, intValAr, cmdVal
				}(aVal2)
				return "", 0, entities.Foo{}, nil, cmdVal3, intValAr4, intValAr3, nil
			case "":
				fooPtrVal2, cmdVal4 := func() (*entities.Foo, entities.Cmd) {
					cmdVal2, fooPtrVal := service.Step3()
					return fooPtrVal, cmdVal2
				}()
				return "", 0, entities.Foo{}, fooPtrVal2, cmdVal4, []int{}, [3]int{}, nil
			case "b":
				fooVal2 := func() entities.Foo {
					fooVal := service.Step4()
					return fooVal
				}()
				return "", 0, fooVal2, nil, nil, []int{}, [3]int{}, nil
			case "c":
				intVal2 := func() int {
					intVal := service.Step5()
					return intVal
				}()
				return "", intVal2, entities.Foo{}, nil, nil, []int{}, [3]int{}, nil
			case "d":
				stringVal3 := func() string {
					stringVal := service.Step6()
					return stringVal
				}()
				return stringVal3, 0, entities.Foo{}, nil, nil, []int{}, [3]int{}, nil
			case "e":
				stringVal4 := func() string {
					stringVal2 := service.Step6()
					return stringVal2
				}()
				return stringVal4, 0, entities.Foo{}, nil, nil, []int{}, [3]int{}, nil
			default:
				return "", 0, entities.Foo{}, nil, nil, []int{}, [3]int{}, fmt.Errorf("unsupported logic by aVal")
			}
		}(aVal3)
		if err != nil {
			return intValAr6, intValAr5, cmdVal5, fooPtrVal3, fooVal3, intVal3, stringVal5, err
		}
		return intValAr6, intValAr5, cmdVal5, fooPtrVal3, fooVal3, intVal3, stringVal5, nil
	}
}
func NewAImpl() *AImpl {
	return &AImpl{failureFieldFunc: failure(), step1FieldFunc: step1(), step2FieldFunc: step2(), step3FieldFunc: step3(), step4FieldFunc: step4(), step5FieldFunc: step5(), step6FieldFunc: step6()}
}

type AService interface {
	Failure(err error) error
	Step1(c entities.Cmd) (a, error)
	Step2(v a) (entities.Cmd, []int, [3]int)
	Step3() (entities.Cmd, *entities.Foo)
	Step4() entities.Foo
	Step5() int
	Step6() string
}
type AImpl struct {
	failureFieldFunc func(err error) error
	step1FieldFunc   func(c entities.Cmd) (a, error)
	step2FieldFunc   func(v a) (entities.Cmd, []int, [3]int)
	step3FieldFunc   func() (entities.Cmd, *entities.Foo)
	step4FieldFunc   func() entities.Foo
	step5FieldFunc   func() int
	step6FieldFunc   func() string
}
type AFunc func(cmdVal5 entities.Cmd) ([3]int, []int, entities.Cmd,

	*entities.Foo,

	entities.Foo,

	int,

	string,

	error)

func (a *AImpl) Failure(err error) error                 { return a.failureFieldFunc(err) }
func (a *AImpl) Step1(c entities.Cmd) (a, error)         { return a.step1FieldFunc(c) }
func (a *AImpl) Step2(v a) (entities.Cmd, []int, [3]int) { return a.step2FieldFunc(v) }
func (a *AImpl) Step3() (entities.Cmd, *entities.Foo)    { return a.step3FieldFunc() }
func (a *AImpl) Step4() entities.Foo                     { return a.step4FieldFunc() }
func (a *AImpl) Step5() int                              { return a.step5FieldFunc() }
func (a *AImpl) Step6() string                           { return a.step6FieldFunc() }
