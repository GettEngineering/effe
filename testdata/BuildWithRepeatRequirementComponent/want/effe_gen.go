// Code generated by Effe. DO NOT EDIT.

//+build !effeinject

package main

func A(service AService) AFunc {
	return func() error {
		err := service.Step1()
		if err != nil {
			return err
		}
		return nil
	}
}
func B(service BService) BFunc {
	return func() error {
		err := service.A()
		if err != nil {
			return err
		}
		return nil
	}
}
func C(service CService) CFunc {
	return func() error {
		err3 := service.Step2()
		if err3 != nil {
			return err3
		}
		err3 = func() error {
			err := service.Step1()
			if err != nil {
				return err
			}
			err = service.B()
			if err != nil {
				return err
			}
			return nil
		}()
		if err3 != nil {
			return err3
		}
		err3 = service.Step1()
		if err3 != nil {
			return err3
		}
		err3 = func() error {
			err2 := service.Step1()
			if err2 != nil {
				return err2
			}
			err2 = service.B()
			if err2 != nil {
				return err2
			}
			return nil
		}()
		if err3 != nil {
			return err3
		}
		return nil
	}
}
func NewAImpl() *AImpl {
	return &AImpl{step1FieldFunc: step1()}
}
func NewBImpl(service AService) *BImpl {
	return &BImpl{AFieldFunc: A(service)}
}
func NewCImpl(service BService) *CImpl {
	return &CImpl{BFieldFunc: B(service), step1FieldFunc: step1(), step2FieldFunc: step2()}
}

type AService interface {
	Step1() error
}
type AImpl struct {
	step1FieldFunc func() error
}
type AFunc func() error
type BService interface {
	A() error
}
type BImpl struct {
	AFieldFunc func() error
}
type BFunc func() error
type CService interface {
	B() error
	Step1() error
	Step2() error
}
type CImpl struct {
	BFieldFunc     func() error
	step1FieldFunc func() error
	step2FieldFunc func() error
}
type CFunc func() error

func (a *AImpl) Step1() error { return a.step1FieldFunc() }
func (b *BImpl) A() error {
	return b.AFieldFunc()
}
func (c *CImpl) B() error {
	return c.BFieldFunc()
}
func (c *CImpl) Step1() error { return c.step1FieldFunc() }
func (c *CImpl) Step2() error { return c.step2FieldFunc() }
