// Code generated by Effe. DO NOT EDIT.

//+build !effeinject

package main

func A(service AService) AFunc {
	return func() (converter, []http.Request, []*string, []string, error) {
		err := service.Step1()
		if err != nil {
			return nil, []http.Request{}, []*string{}, []string{}, err
		}
		stringValAr, err := service.Step2()
		if err != nil {
			return nil, []http.Request{}, []*string{}, stringValAr, err
		}
		stringPtrValAr, err := service.Step3()
		if err != nil {
			return nil, []http.Request{}, stringPtrValAr, stringValAr, err
		}
		requestValAr, err := service.Step4()
		if err != nil {
			return nil, requestValAr, stringPtrValAr, stringValAr, err
		}
		converterVal, err := service.Step5()
		if err != nil {
			return converterVal, requestValAr, stringPtrValAr, stringValAr, err
		}
		return converterVal, requestValAr, stringPtrValAr, stringValAr, nil
	}
}
func NewAImpl() *AImpl {
	return &AImpl{step1FieldFunc: step1(), step2FieldFunc: step2(), step3FieldFunc: step3(), step4FieldFunc: step4(), step5FieldFunc: step5()}
}

type AService interface {
	Step1() error
	Step2() ([]string, error)
	Step3() ([]*string, error)
	Step4() ([]http.Request, error)
	Step5() (converter, error)
}
type AImpl struct {
	step1FieldFunc func() error
	step2FieldFunc func() ([]string, error)
	step3FieldFunc func() ([]*string, error)
	step4FieldFunc func() ([]http.Request, error)
	step5FieldFunc func() (converter, error)
}
type AFunc func() (converter, []http.Request, []*string, []string, error)

func (a *AImpl) Step1() error                   { return a.step1FieldFunc() }
func (a *AImpl) Step2() ([]string, error)       { return a.step2FieldFunc() }
func (a *AImpl) Step3() ([]*string, error)      { return a.step3FieldFunc() }
func (a *AImpl) Step4() ([]http.Request, error) { return a.step4FieldFunc() }
func (a *AImpl) Step5() (converter, error)      { return a.step5FieldFunc() }
